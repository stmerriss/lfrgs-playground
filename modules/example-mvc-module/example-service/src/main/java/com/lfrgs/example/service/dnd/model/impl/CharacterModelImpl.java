/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lfrgs.example.service.dnd.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.lfrgs.example.service.dnd.model.Character;
import com.lfrgs.example.service.dnd.model.CharacterModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Character service. Represents a row in the &quot;DND_Character&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CharacterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CharacterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CharacterImpl
 * @see Character
 * @see CharacterModel
 * @generated
 */
@ProviderType
public class CharacterModelImpl extends BaseModelImpl<Character>
	implements CharacterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a character model instance should use the {@link Character} interface instead.
	 */
	public static final String TABLE_NAME = "DND_Character";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mvccVersion", Types.BIGINT },
			{ "characterId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "level", Types.INTEGER },
			{ "race", Types.VARCHAR },
			{ "characterClass", Types.VARCHAR },
			{ "characterName", Types.VARCHAR },
			{ "strength", Types.INTEGER },
			{ "dexterity", Types.INTEGER },
			{ "constitution", Types.INTEGER },
			{ "intelligence", Types.INTEGER },
			{ "wisdom", Types.INTEGER },
			{ "charisma", Types.INTEGER },
			{ "speed", Types.INTEGER },
			{ "hp", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("characterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("race", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("characterClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("characterName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("strength", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dexterity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("constitution", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("intelligence", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("wisdom", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("charisma", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("speed", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hp", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table DND_Character (mvccVersion LONG default 0 not null,characterId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,level INTEGER,race VARCHAR(75) null,characterClass VARCHAR(75) null,characterName VARCHAR(75) null,strength INTEGER,dexterity INTEGER,constitution INTEGER,intelligence INTEGER,wisdom INTEGER,charisma INTEGER,speed INTEGER,hp INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table DND_Character";
	public static final String ORDER_BY_JPQL = " ORDER BY character.characterName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DND_Character.characterName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.lfrgs.example.service.dnd.example.service.dnd.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lfrgs.example.service.dnd.model.Character"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.lfrgs.example.service.dnd.example.service.dnd.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lfrgs.example.service.dnd.model.Character"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.lfrgs.example.service.dnd.example.service.dnd.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lfrgs.example.service.dnd.model.Character"),
			true);
	public static final long CHARACTERCLASS_COLUMN_BITMASK = 1L;
	public static final long CHARACTERNAME_COLUMN_BITMASK = 2L;
	public static final long RACE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.lfrgs.example.service.dnd.example.service.dnd.util.ServiceProps.get(
				"lock.expiration.time.com.lfrgs.example.service.dnd.model.Character"));

	public CharacterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _characterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCharacterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _characterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Character.class;
	}

	@Override
	public String getModelClassName() {
		return Character.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mvccVersion", getMvccVersion());
		attributes.put("characterId", getCharacterId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("level", getLevel());
		attributes.put("race", getRace());
		attributes.put("characterClass", getCharacterClass());
		attributes.put("characterName", getCharacterName());
		attributes.put("strength", getStrength());
		attributes.put("dexterity", getDexterity());
		attributes.put("constitution", getConstitution());
		attributes.put("intelligence", getIntelligence());
		attributes.put("wisdom", getWisdom());
		attributes.put("charisma", getCharisma());
		attributes.put("speed", getSpeed());
		attributes.put("hp", getHp());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mvccVersion = (Long)attributes.get("mvccVersion");

		if (mvccVersion != null) {
			setMvccVersion(mvccVersion);
		}

		Long characterId = (Long)attributes.get("characterId");

		if (characterId != null) {
			setCharacterId(characterId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer level = (Integer)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String race = (String)attributes.get("race");

		if (race != null) {
			setRace(race);
		}

		String characterClass = (String)attributes.get("characterClass");

		if (characterClass != null) {
			setCharacterClass(characterClass);
		}

		String characterName = (String)attributes.get("characterName");

		if (characterName != null) {
			setCharacterName(characterName);
		}

		Integer strength = (Integer)attributes.get("strength");

		if (strength != null) {
			setStrength(strength);
		}

		Integer dexterity = (Integer)attributes.get("dexterity");

		if (dexterity != null) {
			setDexterity(dexterity);
		}

		Integer constitution = (Integer)attributes.get("constitution");

		if (constitution != null) {
			setConstitution(constitution);
		}

		Integer intelligence = (Integer)attributes.get("intelligence");

		if (intelligence != null) {
			setIntelligence(intelligence);
		}

		Integer wisdom = (Integer)attributes.get("wisdom");

		if (wisdom != null) {
			setWisdom(wisdom);
		}

		Integer charisma = (Integer)attributes.get("charisma");

		if (charisma != null) {
			setCharisma(charisma);
		}

		Integer speed = (Integer)attributes.get("speed");

		if (speed != null) {
			setSpeed(speed);
		}

		Integer hp = (Integer)attributes.get("hp");

		if (hp != null) {
			setHp(hp);
		}
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@Override
	public long getCharacterId() {
		return _characterId;
	}

	@Override
	public void setCharacterId(long characterId) {
		_characterId = characterId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		_level = level;
	}

	@Override
	public String getRace() {
		if (_race == null) {
			return "";
		}
		else {
			return _race;
		}
	}

	@Override
	public void setRace(String race) {
		_columnBitmask |= RACE_COLUMN_BITMASK;

		if (_originalRace == null) {
			_originalRace = _race;
		}

		_race = race;
	}

	public String getOriginalRace() {
		return GetterUtil.getString(_originalRace);
	}

	@Override
	public String getCharacterClass() {
		if (_characterClass == null) {
			return "";
		}
		else {
			return _characterClass;
		}
	}

	@Override
	public void setCharacterClass(String characterClass) {
		_columnBitmask |= CHARACTERCLASS_COLUMN_BITMASK;

		if (_originalCharacterClass == null) {
			_originalCharacterClass = _characterClass;
		}

		_characterClass = characterClass;
	}

	public String getOriginalCharacterClass() {
		return GetterUtil.getString(_originalCharacterClass);
	}

	@Override
	public String getCharacterName() {
		if (_characterName == null) {
			return "";
		}
		else {
			return _characterName;
		}
	}

	@Override
	public void setCharacterName(String characterName) {
		_columnBitmask = -1L;

		if (_originalCharacterName == null) {
			_originalCharacterName = _characterName;
		}

		_characterName = characterName;
	}

	public String getOriginalCharacterName() {
		return GetterUtil.getString(_originalCharacterName);
	}

	@Override
	public int getStrength() {
		return _strength;
	}

	@Override
	public void setStrength(int strength) {
		_strength = strength;
	}

	@Override
	public int getDexterity() {
		return _dexterity;
	}

	@Override
	public void setDexterity(int dexterity) {
		_dexterity = dexterity;
	}

	@Override
	public int getConstitution() {
		return _constitution;
	}

	@Override
	public void setConstitution(int constitution) {
		_constitution = constitution;
	}

	@Override
	public int getIntelligence() {
		return _intelligence;
	}

	@Override
	public void setIntelligence(int intelligence) {
		_intelligence = intelligence;
	}

	@Override
	public int getWisdom() {
		return _wisdom;
	}

	@Override
	public void setWisdom(int wisdom) {
		_wisdom = wisdom;
	}

	@Override
	public int getCharisma() {
		return _charisma;
	}

	@Override
	public void setCharisma(int charisma) {
		_charisma = charisma;
	}

	@Override
	public int getSpeed() {
		return _speed;
	}

	@Override
	public void setSpeed(int speed) {
		_speed = speed;
	}

	@Override
	public int getHp() {
		return _hp;
	}

	@Override
	public void setHp(int hp) {
		_hp = hp;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Character.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Character toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Character)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CharacterImpl characterImpl = new CharacterImpl();

		characterImpl.setMvccVersion(getMvccVersion());
		characterImpl.setCharacterId(getCharacterId());
		characterImpl.setGroupId(getGroupId());
		characterImpl.setCompanyId(getCompanyId());
		characterImpl.setUserId(getUserId());
		characterImpl.setUserName(getUserName());
		characterImpl.setCreateDate(getCreateDate());
		characterImpl.setModifiedDate(getModifiedDate());
		characterImpl.setLevel(getLevel());
		characterImpl.setRace(getRace());
		characterImpl.setCharacterClass(getCharacterClass());
		characterImpl.setCharacterName(getCharacterName());
		characterImpl.setStrength(getStrength());
		characterImpl.setDexterity(getDexterity());
		characterImpl.setConstitution(getConstitution());
		characterImpl.setIntelligence(getIntelligence());
		characterImpl.setWisdom(getWisdom());
		characterImpl.setCharisma(getCharisma());
		characterImpl.setSpeed(getSpeed());
		characterImpl.setHp(getHp());

		characterImpl.resetOriginalValues();

		return characterImpl;
	}

	@Override
	public int compareTo(Character character) {
		int value = 0;

		value = getCharacterName().compareTo(character.getCharacterName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Character)) {
			return false;
		}

		Character character = (Character)obj;

		long primaryKey = character.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CharacterModelImpl characterModelImpl = this;

		characterModelImpl._setModifiedDate = false;

		characterModelImpl._originalRace = characterModelImpl._race;

		characterModelImpl._originalCharacterClass = characterModelImpl._characterClass;

		characterModelImpl._originalCharacterName = characterModelImpl._characterName;

		characterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Character> toCacheModel() {
		CharacterCacheModel characterCacheModel = new CharacterCacheModel();

		characterCacheModel.mvccVersion = getMvccVersion();

		characterCacheModel.characterId = getCharacterId();

		characterCacheModel.groupId = getGroupId();

		characterCacheModel.companyId = getCompanyId();

		characterCacheModel.userId = getUserId();

		characterCacheModel.userName = getUserName();

		String userName = characterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			characterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			characterCacheModel.createDate = createDate.getTime();
		}
		else {
			characterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			characterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			characterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		characterCacheModel.level = getLevel();

		characterCacheModel.race = getRace();

		String race = characterCacheModel.race;

		if ((race != null) && (race.length() == 0)) {
			characterCacheModel.race = null;
		}

		characterCacheModel.characterClass = getCharacterClass();

		String characterClass = characterCacheModel.characterClass;

		if ((characterClass != null) && (characterClass.length() == 0)) {
			characterCacheModel.characterClass = null;
		}

		characterCacheModel.characterName = getCharacterName();

		String characterName = characterCacheModel.characterName;

		if ((characterName != null) && (characterName.length() == 0)) {
			characterCacheModel.characterName = null;
		}

		characterCacheModel.strength = getStrength();

		characterCacheModel.dexterity = getDexterity();

		characterCacheModel.constitution = getConstitution();

		characterCacheModel.intelligence = getIntelligence();

		characterCacheModel.wisdom = getWisdom();

		characterCacheModel.charisma = getCharisma();

		characterCacheModel.speed = getSpeed();

		characterCacheModel.hp = getHp();

		return characterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{mvccVersion=");
		sb.append(getMvccVersion());
		sb.append(", characterId=");
		sb.append(getCharacterId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", race=");
		sb.append(getRace());
		sb.append(", characterClass=");
		sb.append(getCharacterClass());
		sb.append(", characterName=");
		sb.append(getCharacterName());
		sb.append(", strength=");
		sb.append(getStrength());
		sb.append(", dexterity=");
		sb.append(getDexterity());
		sb.append(", constitution=");
		sb.append(getConstitution());
		sb.append(", intelligence=");
		sb.append(getIntelligence());
		sb.append(", wisdom=");
		sb.append(getWisdom());
		sb.append(", charisma=");
		sb.append(getCharisma());
		sb.append(", speed=");
		sb.append(getSpeed());
		sb.append(", hp=");
		sb.append(getHp());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.lfrgs.example.service.dnd.model.Character");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mvccVersion</column-name><column-value><![CDATA[");
		sb.append(getMvccVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>characterId</column-name><column-value><![CDATA[");
		sb.append(getCharacterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>race</column-name><column-value><![CDATA[");
		sb.append(getRace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>characterClass</column-name><column-value><![CDATA[");
		sb.append(getCharacterClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>characterName</column-name><column-value><![CDATA[");
		sb.append(getCharacterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>strength</column-name><column-value><![CDATA[");
		sb.append(getStrength());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dexterity</column-name><column-value><![CDATA[");
		sb.append(getDexterity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constitution</column-name><column-value><![CDATA[");
		sb.append(getConstitution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>intelligence</column-name><column-value><![CDATA[");
		sb.append(getIntelligence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wisdom</column-name><column-value><![CDATA[");
		sb.append(getWisdom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>charisma</column-name><column-value><![CDATA[");
		sb.append(getCharisma());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>speed</column-name><column-value><![CDATA[");
		sb.append(getSpeed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hp</column-name><column-value><![CDATA[");
		sb.append(getHp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Character.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Character.class, ModelWrapper.class
		};
	private long _mvccVersion;
	private long _characterId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _level;
	private String _race;
	private String _originalRace;
	private String _characterClass;
	private String _originalCharacterClass;
	private String _characterName;
	private String _originalCharacterName;
	private int _strength;
	private int _dexterity;
	private int _constitution;
	private int _intelligence;
	private int _wisdom;
	private int _charisma;
	private int _speed;
	private int _hp;
	private long _columnBitmask;
	private Character _escapedModel;
}